visited_from_start = {}
queue_from_start = []
visited_from_end = {}
queue_from_end = []

def bfs(start_cube, end_cube):
  visited_from_start[start_cube.hash()]=None
  queue_from_start.append(start_cube)
  visited_from_end[end_cube.hash()]=None
  queue_from_end.append(end_cube)

  found = False
  while queue_from_start and queue_from_end:
    current_cube_start = queue_from_start.pop(0)
    current_cube_end = queue_from_end.pop(0)

    l1=get_neighbours(current_cube_start)
    l2=get_neighbours(current_cube_end)
    
    for v in l1:
      if v.hash() not in visited_from_start:
        visited_from_start[v.hash()]=current_cube_start
        queue_from_start.append(v)
        if v.hash() in visited_from_end:
          common = v.clone()
          found = True
          break
    if found:
      break
    for v in l2:
      if v.hash() not in visited_from_end:
        visited_from_end[v.hash()]=current_cube_end
        queue_from_end.append(v)
        if v.hash() in visited_from_start:
          common = v.clone()
          found = True
          break
    if found:
      break
  
  if found:
    print("Found")
  else:
    print("Not found")
    
  path = []
  current_cube = common.clone()
  while current_cube.hash() != start_cube.hash():
      if current_cube.hash() in visited_from_start:
          path.append(current_cube)
          if visited_from_start[current_cube.hash()] is not None:
            current_cube = visited_from_start[current_cube.hash()]
          else:
              break
      else:
          break
        
  path.append(start_cube)
  path.reverse()
  
  current_cube = common.clone()
  while current_cube.hash() != end_cube.hash():
      if current_cube.hash() in visited_from_end:
          path.append(current_cube)
          if visited_from_end[current_cube.hash()] is not None:
            current_cube = visited_from_end[current_cube.hash()]
          else:
              break
      else:
          break
        
  path.append(end_cube)
  
  print("Drumul are {} mutÄƒri".format(len(path) - 1))
  for c in path:
      c.render3D()
  
  return path
    
%time bfs(cube, unscrambledCube) 